<!--
  Copyright (c) 2018 THALES GLOBAL SERVICES.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Public License v1.0
  which accompanies this distribution, and is available at
  http://www.eclipse.org/legal/epl-v10.html

  Contributors:
       Thales - initial API and implementation
-->
=Functionalities=

Once the Basic Variability Add-On is installed, you have to activate this viewpoint for each projects you want to work with, to see how please refers to:
[[../help/topic/org.polarsys.capella.viewpoint.doc/html/activation/activation.html|Capella Guide > User Manual > Viewpoints > Activation]].

Then, these projects are susceptible of being enriched with filtering information. That means that for creating a generic product the user should follow the standard Capella new project creation.

==Defining the Variability model==

The '''filtering model''' supports defining a set of filtering points called '''features'''. The filtering model is defined in the '''FilteringModel''' element that is created as a child of System Engineering. For creating a FilteringModel right-click the System Engineering model element.


<center>[[Image:Images/functionalities_define_filtering_model.png|540px]]</center>






===Adding new features to the Variability model===

New features could be added once the user creates the FilteringModel element.


<center>[[Image:Images/functionalities_adding_filtering_model_criterion.png|520px]]</center>



The user can also create constraints for documentation. Notice also that FilteringModel is a list of Variability Features so no hierarchical relations could be defined.

==Associate Model elements with Features==

Each melody element contains a Variability properties section. Double click an element or see the Properties view of a given element.

<center>[[Image:Images/functionalities_associate_criteria.png|520px]]</center>




A feature selector will appear and the user can select the feature or set of features associated with the given element.

If no filtering features is assigned explicitly to a given melody element, it is still possible that this element could be assigned implicitly to a feature. For example: a Part element of a given optional element or the child of an optional element. This derived property of a melody element is called Implicit Features.

Also, the action to associate features to model elements is available selecting a melody element, right click, and  

[[Image:Images/filtering_icon.png|16px]] '''Variability -&gt; [[Image:Images/filtering_assign_icon.png|16px]] Assign Variability Features'''

<center>[[Image:Images/functionalities_define_filtering_model_assign.png|600px]]</center>



===Multiple elements Assignation===

The user can also select multiple model elements and apply feature selections to all of them at the same time.

<center>[[Image:Images/functionalities_multiple_assign.png|400px]]</center>


The initial state of this dialog shows the current feature status of the selected elements. These figures present possible initial states of the assignation dialog and its meaning:

{| class="prettytable"
|-
|
<center>[[Image:Images/functionalities_multiple_assign_choice.png|240px]]</center>

|
<center>[[Image:Images/functionalities_multiple_assign_choice2.png|240px]]</center>

|
<center>[[Image:Images/functionalities_multiple_assign_choice3.png|240px]]</center>

|-
|
<center>''''None of the selected elements have ''associated features''</center>

|
<center>''''All the selected elements belong ''to Feature1''</center>

|
<center>''''All the selected elements belong to ''Feature1 and some of them, not all, belong to Feature2''</center>

|}
In the third case, if no user modifications are performed to this gray checkbox in Feature2, the tags for this feature will remain as they were in this moment.



===Using an existing FilteringResult for feature assignation===

Users may want to assign to model elements the features that were previously assigned to an existing FilteringResult. A dedicated selector in the Assign Variability Features dialog allows the user to reuse feature selections.

<center>[[Image:Images/functionalities_use_result.png|600px]]</center>

===Automatic assignation when creating Model Elements===

If the user is modifying the Capella model by adding new elements that will contribute to a feature (or to a given feature selection), then it will be interesting to be able to automatically assign features when creating any model element. First the user should create a Creation Default Feature Set element as child of System Engineering and then select the features in the properties view of this element.


<center>[[Image:Images/functionalities_automatic_assignation.png|520px]]</center>

<center>[[Image:Images/functionalities_automatic_assignation_assign.png|520px]]</center>


==Creating specific product configurations==

===Create configurations===

Once Domain Engineers provide a Generic Model to derive products, then the Application Engineers can use it to extract products based on their feature selections.

To create configurations first the user should create a Configurations element as child of the System Engineering element.


<center>[[Image:Images/functionalities_create_configurations.png|520px]]</center>


Then the user could create a specific FilteringResult as child of the Configurations element and select its features in its properties view.

<center>[[Image:Images/functionalities_create_result.png|520px]]</center>


<center>[[Image:Images/functionalities_create_result_assign.png|520px]]</center>



When selecting a Feature in the Feature Model, the user could see in the Semantic Browser the Configurations that have this feature.

===Product family representation===

Activate Variability viewpoint right clicking Aird file and clicking '''Viewpoints selection'''

<center>[[Image:Images/functionalities_activate_viewpoint.png|420px]]</center>



Right click '''System Engineering''' element and then '''New Diagram / Table -&gt; <nowiki>[VAR]</nowiki> Product family'''

<center>[[Image:Images/functionalities_create_table_filtering.png|520px]]</center>


The matrix allows modifying configurations, creating and deleting configurations, filtering features and applying filters and other basic cross table functionalities.

<center>[[Image:Images/functionalities_table_filtering.png|480px]]</center>


==Derivation of a specific Product==

This action is available right clicking in a FilteringResult element.

[[Image:Images/filtering_icon.png|16px]] '''Variability -&gt;  Perform Derivation'''

<center>[[Image:Images/functionalities_perform_derivation.png|520px]]</center>




The user should open the Project and Melody session if closed. Also there is the restriction that a generic product project can only contains one Capella systems engineering project.

In the following dialog the users should introduce the name of the product that is going to be extracted. By default it will be the name of the FilteringResult. A new project will be created in the workspace. This specific product will contain only the elements that were associated to the selected features in the configuration.

<center>[[Image:Images/functionalities_perform_derivation_create.png|380px]]</center>

{| class="prettytable"
|-
|


|
Notice that descriptions hyperlinks could reference an incorrect element if the session of the Domain project is opened while the session of a derived project is also opened.

|}
==Derivation with libraries==

===Derivation of a project doesn’t derive its referenced libraries===

{| class="prettytable"
|-
|


|
Derivation of a model referencing libraries will not derive the referenced libraries. So on, libraries will remain untouched/not derived and ALL its referenced elements will remain referenced by the application project even if these library’s elements were not assigned to the features of the derivation.

|}



===Variability Features from Libraries===

When a model references libraries, it is possible to assign features defined in referenced libraries on elements from the given model. Such features will be avaibable on the assignation wizard.

[[Image:Images/filtering_icon.png|16px]] '''Variability -&gt; [[Image:Images/filtering_assign_icon.png|16px]] Assign Variability Features'''


<center>[[Image:Images/functionalities_derivation_libraries_assign_menu.png|640px]]</center>

<center>[[Image:Images/functionalities_derivation_libraries_assign.png|380px]]</center>


''The set of available features in the wizard depends on model elements to be assigned; In case where assignation is made on elements from a referenced library, features defined in the project will not be proposed (to avoid cycle dependency between library and project)''


===Source and application project ID===

Capella can’t have two projects with the same ID and referencing the same library.

If your project has at least one reference to a library, you must check the corresponding option in Variability preference page.

<center>[[Image:Images/functionalities_derivation_libraries_preferences.png|540px]]</center>





After derivation, application project will have a different project ID. It means, if you use DiffMerge for application/domain model comparison, it will fail. By default, DiffMerge use ID for comparison between models.

{| class="prettytable"
|-
|


|


If you want to use DiffMerge between application and domain model, please follow these instructions:

# Close all opened sessions: '''Right click''' on *.aird and select '''Close Session'''. For domain, application and library models.
# Open Navigator View: '''Window-&gt;Show View-&gt;Other…-&gt;General-&gt;Navigator'''
# Change ID in melodymodeller application model: '''Right click''' on melodymodeller application model and select '''Open With-&gt;Text Editor'''. Change ID of the melodymodeller with the domain melodymodeller ID. (ID look like: ''&lt;<nowiki>org.polarsys.capella.core.data.capellamodeller</nowiki>:Project xmi:version="2.0" … id="1c751911-23e0-426f-8cc6-42cec0bb20d7"  name="toto"&gt;''
# Change ID in aird application model: Change reference to the .melodymodeller (reference to melodymodeller look like: ''<nowiki>toto.me</nowiki>lodymodeller#1c751911-23e0-426f-8cc6-42cec0bb20d7'')
# Now you can use DiffMerge, but always with closed session.
# Restore Application ID before open any session.

|}










== Visualizing filtering in Model Elements==

===Variability related decorators===

Once you select a feature for a given element it appears in the Semantic Browser, as a suffix in the Capella Project Explorer and also with a question mark decorator in the diagram. The decorator appears in the top-right side of the elements and in the center in the case of links.

<center>[[Image:Images/functionalities_visualizing_decorator.png|600px]]</center>


There are some Preferences that could be adjusted for this visualization

For the Capella Navigator, image and text feature decorators could be activated / deactivated in

'''Window -&gt; Preferences -&gt; General -&gt; Appearance -&gt; Label decorators'''

<center>[[Image:Images/functionalities_visualizing_decorator_preferences.png|520px]]</center>


For the Melody Diagrams decorators could be activated / deactivated in

'''Window -&gt; Preferences -&gt; Capella -&gt; Variability'''

Or right clicking in a Diagram canvas.

[[Image:Images/filtering_icon.png|16px]] '''Variability -&gt; [[Image:Images/filtering_preferences_icon.png|16px]] Preferences'''

<center>[[Image:Images/functionalities_filtering_preferences.png|540px]]</center>

* '''Show associated Filtering Criterion in Diagram'' is unchecked by default. This decorator allows visualizing the associated features of the semantic elements of diagram element.

<center>[[Image:Images/functionalities_filtering_preferences_show_criteria_diagram.png|160px]]</center>

* '''Show Optional element decorator in Diagram''' is checked by default. This decorator allows visualizing an icon in the top right of the optional element.
* '''Keep decorators when saving Diagram''' is checked by default. It allows establishing if the user wants to include these decorators when exporting a diagram image.


<center>[[Image:Images/functionalities_filtering_preferences_decorators_on_export.png|480px]]</center>


===Variability Features Overview===

A global overview of the associated features could be obtained right clicking in a model element and selecting [[Image:Images/filtering_icon.png|16px]] '''Variability -&gt; [[Image:Images/filtering_criteria_overview_icon.png|16px]]  Variability Features Overview'''.

The overview will show the elements with feature assignations and also their related elements.  For a full overview normally it is desired to perform it at Project element level.

<center>[[Image:Images/functionalities_overview.png|460px]]</center>


This Overview has filtering options by selecting a feature or by introducing an element name. It is also possible to export this overview as CSV or TXT file.



==Filtering based on features==

When working with diagrams in the definition of the Generic Product model it will be desired to filter based on features. Notice that filtering, show/hide and pinning functionalities are not available for sequence diagrams.

===Hide Optionals and Hide Common filters===

Right click in the Diagram canvas

[[Image:Images/filtering_icon.png|16px]] '''Variability -&gt; [[Image:Images/filtering_hide_optionals_icon.png|16px]] Hide Optionals'''

[[Image:Images/filtering_icon.png|16px]] '''Variability -&gt; [[Image:Images/filtering_hide_common_icon.png|16px]] Hide Common'''

These filters could be used to hide all the optional elements (those that have associated features) or to hide common elements respectively. Common elements are those that are not associated with any feature and therefore are part of the core of the product family. If a filter is active in the Diagram it appears as checked.







===Show or hide elements based on the selection of a set of features===

Right click in the Diagram canvas

[[Image:Images/filtering_icon.png|16px]] '''Variability -&gt; [[Image:Images/filtering_show_hide_criteria_icon.png|16px]] Show/hide features'''

The users select the features that they want to be shown. Or deselect the features that they want to be hidden.

<center>[[Image:Images/functionalities_show_hide_features.png|240px]]</center>


If a feature in this list appears in italic font it means that some associated model elements are already hidden by other filters. If a filter is active in the Diagram it appears a check overlay decorator in the bottom right of the icon.

{| class="prettytable"
|-
|


|
Notice that all the diagram filters could be used in combination. For example Hide Common and Filtering for a given feature will show the feature specific elements in the diagram.

|}
==Pinning feature elements in the diagram==

Right click in the Diagram canvas:

[[Image:Images/filtering_icon.png|16px]] '''Variability -&gt; [[Image:Images/filtering_pin_criteria.png|16px]] Pin/unpin features'''

The user can pin/unpin the associated diagram elements of a given set of features. 



==Select feature elements in the diagram==

Right click in the Diagram canvas:

[[Image:Images/filtering_icon.png|16px]] '''Variability -&gt; [[Image:Images/filtering_select_criteria.png|16px]] '''''' Select features'''

The user can select the associated diagram elements of a given set of features. There is also a checkbox that allows the user to include all the common diagram elements in the selection.

==Variability metrics==

Metrics could be seen right clicking the '''''Systems Engineering''''' model element.

[[Image:Images/filtering_icon.png|16px]] '''Variability -&gt; [[Image:Images/filtering_metrics_icon.png|16px]] Variability metrics'''

The optional ratio helps to understand where is the filtering in the model and the relative size of the optional elements. The optional rate showed for each model element is defined as:

'''Optional ratio (element) =''' 100 if element is optional. 0 if element is not optional and it has no child. Else optional ration will be (number of optional children / total number of children)


<center>[[Image:Images/functionalities_metrics.png|480px]]</center>


==Propagation of filtering in transitions==

Variability information will be propagated between layers using the default Melody Transitions. For example the following screenshot shows the transition of an optional Actor from System Analysis to Logic Architecture.


<center>[[Image:Images/functionalities_transitions.png|520px]]</center>


The transition of filtering information could be deactivated in

'''Window -&gt; Preferences -&gt; Capella -&gt; Transition/Generation'''

<center>[[Image:Images/functionalities_transitions_preferences.png|580px]]</center>

Below DiffMerge wizard allow the user to see the effects of the transition and also to be able to decide for each transition if the filtering information should be propagated or not.


<center>[[Image:Images/functionalities_transitions_merge.png|680px]]</center>


==Validation==

The Basic Variability Add-On contributes new constraints to Melody Models mainly to assure the consistency of the filtering information assigned to model elements. This constraints could be shown, activated or deactivated at

'''Window -&gt; Preferences -&gt; Model Validation -&gt; Constraints'''

<center>[[Image:Images/functionalities_validation.png|640px]]</center>

To run the validation the user should perform the standard Capella validation selecting any melody element.

<center>[[Image:Images/functionalities_validation_menu.png|440px]]</center>

Those are the currently available constraints that will be checked:

===Integrity===

'''VAR_I_01 - Only one FilteringModel, Configurations, DefaultCreationFeatureSet as Project child'''

''Error'': Because of a technical limitation the user could add more than one FilteringModel, Configurations, DefaultCreationFeatureSet as Project child. Only one is permitted as the other ones will be ignored.

'''VAR_I_02 - Only one AssociatedFeatureSet as MelodyElement child'''

''Error'': Because of a technical limitation the user could add more than one AssociatedFeatureSet as MelodyElement child. Only one is permitted as the other ones will be ignored.

'''VAR_I_03 - Empty AssociatedFeatureSet'''

''Warning'': It is not worthy to keep an AssociatedFeatureSet element without references to filtering features. It should be removed or updated.

===Design===

'''VAR_D_01 - MelodyElement parents consistency'''

''Error'': If a MelodyElement has feature V and any of its parents contains other associated features but not V.

'''VAR_D_02 - Components' functions consistency'''

''Warning'': If a Function in a Component does not contain the feature of the Component.

'''VAR_D_03 - Components' deployment links consistency'''

''Warning'': If a Component has a deployment link to another Component and it contains a feature that the other Component does not contain.

'''VAR_D_04 - FunctionalExchanges' components consistency'''

''Warning'': If a Functional Exchange contains a Feature that is not contained in its associated Functions.

'''VAR_D_05 - PhysicalLinks' components consistency'''

''Error'': If a PhysicalLink contains a Feature that is not contained in its associated Components.

'''VAR_D_06 - Unused filtering feature'''

''Warning'': A Variability Feature that is never used in any Melody Element







==Customize Capella Project Explorer==

The user could customize the Capella Project Explorer in order to show or hide the filtering related elements.

<center>[[Image:Images/functionalities_customize_view.png|380px]]</center>


<center>[[Image:Images/functionalities_customize_view_filters.png|300px]]</center>


The AssociatedFeatureSet elements are hidden to users by default. All the functionalities are available without showing these elements so showing them is not recommended. If still a user wants to show them, the user should customize the Capella Project Explorer view and deselect Associated Feature Set as hidden elements.

Now the user is able to see and modify the Associated Feature Set elements.  However


<center>[[Image:Images/functionalities_customize_view_set.png|620px]]</center>

==Orchestra compatibility==

Variability information is exported by the melody orchestra connector.

See separate document Basic<nowiki>Variability_Config_Installation.pd</nowiki>f for all the details of the deployment of the specific configuration In Orchestra.

==Melody Team compatibility==

Variability information is exported when users '''export''' the model to a remote repository.  After connecting to a remote model all the presented functionalities are available except the derivation.

Derivation must be performed in a local project. If a derivation want to be performed from a remote model users must '''import''' the model from the remote repository.



